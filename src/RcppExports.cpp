// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// adaptive_C
NumericVector adaptive_C(NumericVector y, NumericVector betas, double u, double c, double G);
RcppExport SEXP _caviar_adaptive_C(SEXP ySEXP, SEXP betasSEXP, SEXP uSEXP, SEXP cSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(adaptive_C(y, betas, u, c, G));
    return rcpp_result_gen;
END_RCPP
}
// AS_C
NumericVector AS_C(NumericVector y, NumericVector betas, double u, double c);
RcppExport SEXP _caviar_AS_C(SEXP ySEXP, SEXP betasSEXP, SEXP uSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(AS_C(y, betas, u, c));
    return rcpp_result_gen;
END_RCPP
}
// ar_ES_C
NumericVector ar_ES_C(NumericVector y, NumericVector Q, NumericVector gammas, NumericVector x);
RcppExport SEXP _caviar_ar_ES_C(SEXP ySEXP, SEXP QSEXP, SEXP gammasSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Q(QSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gammas(gammasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ar_ES_C(y, Q, gammas, x));
    return rcpp_result_gen;
END_RCPP
}
// mult_ES_C
NumericVector mult_ES_C(NumericVector y, NumericVector Q, NumericVector gammas);
RcppExport SEXP _caviar_mult_ES_C(SEXP ySEXP, SEXP QSEXP, SEXP gammasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Q(QSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gammas(gammasSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_ES_C(y, Q, gammas));
    return rcpp_result_gen;
END_RCPP
}
// al_log_loss_function_C
NumericVector al_log_loss_function_C(NumericVector y, NumericVector Q, NumericVector ES, double c);
RcppExport SEXP _caviar_al_log_loss_function_C(SEXP ySEXP, SEXP QSEXP, SEXP ESSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Q(QSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ES(ESSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(al_log_loss_function_C(y, Q, ES, c));
    return rcpp_result_gen;
END_RCPP
}
// SAV_C
NumericVector SAV_C(NumericVector y, NumericVector betas, double u, double c);
RcppExport SEXP _caviar_SAV_C(SEXP ySEXP, SEXP betasSEXP, SEXP uSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(SAV_C(y, betas, u, c));
    return rcpp_result_gen;
END_RCPP
}
// gjrGARCH_C
NumericVector gjrGARCH_C(NumericVector y, NumericVector betas, double u, double c);
RcppExport SEXP _caviar_gjrGARCH_C(SEXP ySEXP, SEXP betasSEXP, SEXP uSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(gjrGARCH_C(y, betas, u, c));
    return rcpp_result_gen;
END_RCPP
}
// indirectGARCH_C
NumericVector indirectGARCH_C(NumericVector y, NumericVector betas, double u, double c);
RcppExport SEXP _caviar_indirectGARCH_C(SEXP ySEXP, SEXP betasSEXP, SEXP uSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(indirectGARCH_C(y, betas, u, c));
    return rcpp_result_gen;
END_RCPP
}
// linearGARCH_C
NumericVector linearGARCH_C(NumericVector y, NumericVector betas, double u, double c);
RcppExport SEXP _caviar_linearGARCH_C(SEXP ySEXP, SEXP betasSEXP, SEXP uSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(linearGARCH_C(y, betas, u, c));
    return rcpp_result_gen;
END_RCPP
}
// linearTGARCH_C
NumericVector linearTGARCH_C(NumericVector y, NumericVector betas, double u, double c);
RcppExport SEXP _caviar_linearTGARCH_C(SEXP ySEXP, SEXP betasSEXP, SEXP uSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(linearTGARCH_C(y, betas, u, c));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_caviar_adaptive_C", (DL_FUNC) &_caviar_adaptive_C, 5},
    {"_caviar_AS_C", (DL_FUNC) &_caviar_AS_C, 4},
    {"_caviar_ar_ES_C", (DL_FUNC) &_caviar_ar_ES_C, 4},
    {"_caviar_mult_ES_C", (DL_FUNC) &_caviar_mult_ES_C, 3},
    {"_caviar_al_log_loss_function_C", (DL_FUNC) &_caviar_al_log_loss_function_C, 4},
    {"_caviar_SAV_C", (DL_FUNC) &_caviar_SAV_C, 4},
    {"_caviar_gjrGARCH_C", (DL_FUNC) &_caviar_gjrGARCH_C, 4},
    {"_caviar_indirectGARCH_C", (DL_FUNC) &_caviar_indirectGARCH_C, 4},
    {"_caviar_linearGARCH_C", (DL_FUNC) &_caviar_linearGARCH_C, 4},
    {"_caviar_linearTGARCH_C", (DL_FUNC) &_caviar_linearTGARCH_C, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_caviar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
